datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // directUrl = env("DIRECT_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    role          UserRole
    studentInfo   Student?  @relation(name: "StudentToUser", fields: [studentPRN], references: [prn], onDelete: Cascade)
    studentPRN    String?   @unique
    adminInfo     Admin?    @relation(name: "AdminToUser", fields: [adminUsername], references: [username], onDelete: Cascade)
    adminUsername String?   @unique
    clubInfo      Club?     @relation(name: "ClubToUser", fields: [clubUsername], references: [username], onDelete: Cascade)
    clubUsername  String?   @unique
    Account       Account[]
    Session       Session[]
}

model Student {
    prn          String         @id
    srn          String
    name         String
    phone        String?
    email        String?
    program      String
    branch       String
    semester     String
    section      String
    campus       String
    cycle        String
    user         User?          @relation(name: "StudentToUser")
    Registration Registration[]
}

model Admin {
    username String @id
    password String
    name     String
    user     User?  @relation(name: "AdminToUser")
}

model Club {
    username String       @id
    password String
    name     String
    campus   Campus
    avatar   String
    events   Event[]      @relation(name: "ClubToEvent")
    links    SocialLink[] @relation(name: "ClubToSocialLink")
    user     User?        @relation(name: "ClubToUser")
}

model SocialLink {
    linkID String @id @default(cuid())
    club   Club   @relation(name: "ClubToSocialLink", fields: [clubID], references: [username], onDelete: Cascade)
    clubID String
    type   String
    label  String
    link   String
}

model Event {
    id             String         @id @default(cuid())
    name           String
    description    String
    imageURL       String
    type           String
    date           String
    participation  RegType
    maxTeamMembers Int
    password       String
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    public         Boolean        @default(false)
    registrations  Registration[] @relation("EventToReg")
    createdBy      Club           @relation(name: "ClubToEvent", fields: [creatorID], references: [username], onDelete: Cascade)
    creatorID      String
}

model Registration {
    id             String    @id @default(cuid())
    event          Event     @relation("EventToReg", fields: [eventID], references: [id], onDelete: Cascade)
    eventID        String
    regType        RegType
    teamName       String?
    maxTeamMembers Int
    ownerID        String?
    students       Student[]
    status         Int
}

enum UserRole {
    STUDENT
    ADMIN
    CLUB
}

enum RegType {
    SOLO
    TEAM
}

enum Campus {
    RR
    EC
}
